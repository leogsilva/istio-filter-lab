apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: nginx-lua-extension
  namespace: ingress-nginx
spec:
  workloadSelector:
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: ingress-nginx
      app.kubernetes.io/name: ingress-nginx
  configPatches:
  - applyTo: HTTP_FILTER
    match:
      context: SIDECAR_INBOUND
      listener:
        portNumber: 80
        filterChain:
          filter:
            name: "envoy.filters.network.http_connection_manager"
            subFilter:
              name: "envoy.filters.http.router"
    patch:
      operation: INSERT_BEFORE
      value: 
       name: envoy.lua
       typed_config:
          "@type": "type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua"
          inlineCode: |
            local alpha='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'
            function toBinaryString(int)
                if int > 64 then
                    error("Bad number "..int.." to convert to binary")
                end        
                local remaining = tonumber(int)
                local bits = ''
                for i = 5, 0, -1 do
                    local pow = 2 ^ i
                    if remaining >= pow then
                        bits = bits .. '1'
                        remaining = remaining - pow
                    else
                        bits = bits .. '0'
                    end
                end
                return bits
            end
            function fromBinaryString(bits)
                return tonumber(bits, 2)
            end

            function decodeBase64(encoded)
                local bitstr = ''
                local decoded = ''
                -- decode chars into bitstring
                for i = 1, string.len(encoded) do
                    local offset, _ = string.find(alpha, string.sub(encoded, i, i))
                    if offset == nil then
                        error("Bad base64 character " .. string.sub(encoded, i, i))
                    end
                    bitstr = bitstr .. toBinaryString(offset-1)
                end
                -- decode bitstring back to chars
                for i = 1, string.len(bitstr), 8 do
                    decoded = decoded .. string.char(fromBinaryString(string.sub(bitstr, i, i+7)))
                end
                return decoded
            end

            -- Internal functions.

            local function kind_of(obj)
              if type(obj) ~= 'table' then return type(obj) end
              local i = 1
              for _ in pairs(obj) do
                if obj[i] ~= nil then i = i + 1 else return 'table' end
              end
              if i == 1 then return 'table' else return 'array' end
            end

            local function escape_str(s)
              local in_char  = {'\\', '"', '/', '\b', '\f', '\n', '\r', '\t'}
              local out_char = {'\\', '"', '/',  'b',  'f',  'n',  'r',  't'}
              for i, c in ipairs(in_char) do
                s = s:gsub(c, '\\' .. out_char[i])
              end
              return s
            end

            -- Returns pos, did_find; there are two cases:
            -- 1. Delimiter found: pos = pos after leading space + delim; did_find = true.
            -- 2. Delimiter not found: pos = pos after leading space;     did_find = false.
            -- This throws an error if err_if_missing is true and the delim is not found.
            local function skip_delim(str, pos, delim, err_if_missing)
              pos = pos + #str:match('^%s*', pos)
              if str:sub(pos, pos) ~= delim then
                if err_if_missing then
                  error('Expected ' .. delim .. ' near position ' .. pos)
                end
                return pos, false
              end
              return pos + 1, true
            end

            -- Expects the given pos to be the first character after the opening quote.
            -- Returns val, pos; the returned pos is after the closing quote character.
            local function parse_str_val(str, pos, val)
              val = val or ''
              local early_end_error = 'End of input found while parsing string.'
              if pos > #str then error(early_end_error) end
              local c = str:sub(pos, pos)
              if c == '"'  then return val, pos + 1 end
              if c ~= '\\' then return parse_str_val(str, pos + 1, val .. c) end
              -- We must have a \ character.
              local esc_map = {b = '\b', f = '\f', n = '\n', r = '\r', t = '\t'}
              local nextc = str:sub(pos + 1, pos + 1)
              if not nextc then error(early_end_error) end
              return parse_str_val(str, pos + 2, val .. (esc_map[nextc] or nextc))
            end

            -- Returns val, pos; the returned pos is after the number's final character.
            local function parse_num_val(str, pos)
              local num_str = str:match('^-?%d+%.?%d*[eE]?[+-]?%d*', pos)
              local val = tonumber(num_str)
              if not val then error('Error parsing number at position ' .. pos .. '.') end
              return val, pos + #num_str
            end


            -- Public values and functions.

            function json_stringify(obj, as_key)
              local s = {}  -- We'll build the string as an array of strings to be concatenated.
              local kind = kind_of(obj)  -- This is 'array' if it's an array or type(obj) otherwise.
              if kind == 'array' then
                if as_key then error('Can\'t encode array as key.') end
                s[#s + 1] = '['
                for i, val in ipairs(obj) do
                  if i > 1 then s[#s + 1] = ', ' end
                  s[#s + 1] = json_stringify(val)
                end
                s[#s + 1] = ']'
              elseif kind == 'table' then
                if as_key then error('Can\'t encode table as key.') end
                s[#s + 1] = '{'
                for k, v in pairs(obj) do
                  if #s > 1 then s[#s + 1] = ', ' end
                  s[#s + 1] = json_stringify(k, true)
                  s[#s + 1] = ':'
                  s[#s + 1] = json_stringify(v)
                end
                s[#s + 1] = '}'
              elseif kind == 'string' then
                return '"' .. escape_str(obj) .. '"'
              elseif kind == 'number' then
                if as_key then return '"' .. tostring(obj) .. '"' end
                return tostring(obj)
              elseif kind == 'boolean' then
                return tostring(obj)
              elseif kind == 'nil' then
                return 'null'
              else
                error('Unjsonifiable type: ' .. kind .. '.')
              end
              return table.concat(s)
            end

            function json_parse(str, pos, end_delim)
              pos = pos or 1
              if pos > #str then error('Reached unexpected end of input.') end
              local pos = pos + #str:match('^%s*', pos)  -- Skip whitespace.
              local first = str:sub(pos, pos)
              if first == '{' then  -- Parse an object.
                local obj, key, delim_found = {}, true, true
                pos = pos + 1
                while true do
                  key, pos = json_parse(str, pos, '}')
                  if key == nil then return obj, pos end
                  if not delim_found then error('Comma missing between object items.') end
                  pos = skip_delim(str, pos, ':', true)  -- true -> error if missing.
                  obj[key], pos = json_parse(str, pos)
                  pos, delim_found = skip_delim(str, pos, ',')
                end
              elseif first == '[' then  -- Parse an array.
                local arr, val, delim_found = {}, true, true
                pos = pos + 1
                while true do
                  val, pos = json_parse(str, pos, ']')
                  if val == nil then return arr, pos end
                  if not delim_found then error('Comma missing between array items.') end
                  arr[#arr + 1] = val
                  pos, delim_found = skip_delim(str, pos, ',')
                end
              elseif first == '"' then  -- Parse a string.
                return parse_str_val(str, pos + 1)
              elseif first == '-' or first:match('%d') then  -- Parse a number.
                return parse_num_val(str, pos)
              elseif first == end_delim then  -- End of an object or array.
                return nil, pos + 1
              else  -- Parse true, false, or null.
                local literals = {['true'] = true, ['false'] = false, ['null'] = json.null}
                for lit_str, lit_val in pairs(literals) do
                  local lit_end = pos + #lit_str - 1
                  if str:sub(pos, lit_end) == lit_str then return lit_val, lit_end + 1 end
                end
                local pos_info_str = 'position ' .. pos .. ': ' .. str:sub(pos, pos + 10)
                error('Invalid json syntax starting at ' .. pos_info_str)
              end
            end

            function decode_jwt(jwt)
              i=0
              result = {}
              for match in (jwt..'.'):gmatch("(.-)%.") do
                  result[i]=decodeBase64(match)
                  i=i+1
              end
              -- header
              head = json_parse(result[0])
              -- claims
              claims = json_parse(result[1])
              return {head=head,claims=claims}
            end

            function get_header(handle, header)
                return handle:headers():get(header)
            end

            function is_sts_jwt(claims)
              return claims.branch and claims.usr
            end

            function envoy_on_request(request_handle)
              local authorization = get_header(request_handle, "Authorization")
              local host = get_header(request_handle,"Host")
              if host and host == "legacy.myfake.io" then
                if authorization then
                  _, _, token = string.find(authorization, "Bearer%s+(.+)")

                  local jwt = decode_jwt(token)
                  
                  if is_sts_jwt(jwt.claims) then
                    request_handle:headers():add("authority","validtoken.myfake.io")
                  else
                    request_handle:headers():add("authority","invalidtoken.myfake.io")
                  end
                else 
                    request_handle:headers():add("authority","noauth.myfake.io")
                end
              end
              -- just do nothing
            end          

